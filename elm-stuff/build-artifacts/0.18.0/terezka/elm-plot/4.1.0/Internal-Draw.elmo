var _terezka$elm_plot$Internal_Draw$addDisplacement = F2(
	function (_p1, _p0) {
		var _p2 = _p1;
		var _p3 = _p0;
		return {ctor: '_Tuple2', _0: _p2._0 + _p3._0, _1: _p2._1 + _p3._1};
	});
var _terezka$elm_plot$Internal_Draw$toPixels = function (pixels) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(pixels),
		'px');
};
var _terezka$elm_plot$Internal_Draw$toPixelsInt = function (_p4) {
	return _terezka$elm_plot$Internal_Draw$toPixels(
		_elm_lang$core$Basics$toFloat(_p4));
};
var _terezka$elm_plot$Internal_Draw$toStyle = function (styles) {
	return A3(
		_elm_lang$core$List$foldr,
		F2(
			function (_p5, r) {
				var _p6 = _p5;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					r,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p6._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							':',
							A2(_elm_lang$core$Basics_ops['++'], _p6._1, '; '))));
			}),
		'',
		styles);
};
var _terezka$elm_plot$Internal_Draw$toRotate = F3(
	function (d, x, y) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'rotate(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(d),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(x),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(y),
								')'))))));
	});
var _terezka$elm_plot$Internal_Draw$toTranslate = function (_p7) {
	var _p8 = _p7;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'translate(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(_p8._0),
			A2(
				_elm_lang$core$Basics_ops['++'],
				',',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p8._1),
					')'))));
};
var _terezka$elm_plot$Internal_Draw$magnitude = 0.5;
var _terezka$elm_plot$Internal_Draw$toBezierPoints = F3(
	function (_p11, _p10, _p9) {
		var _p12 = _p11;
		var _p13 = _p10;
		var _p16 = _p13._1;
		var _p15 = _p13._0;
		var _p14 = _p9;
		var dy = _p14._1 - _p12._1;
		var dx = _p14._0 - _p12._0;
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _p15 - ((dx / 2) * _terezka$elm_plot$Internal_Draw$magnitude), _1: _p16 - ((dy / 2) * _terezka$elm_plot$Internal_Draw$magnitude)},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _p15, _1: _p16},
				_1: {ctor: '[]'}
			}
		};
	});
var _terezka$elm_plot$Internal_Draw$coordsToSmoothBezierCoords = function (coords) {
	var last = A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '_Tuple2', _0: 0, _1: 0},
		_elm_lang$core$List$head(
			_elm_lang$core$List$reverse(coords)));
	var lefts = A2(
		_elm_lang$core$Basics_ops['++'],
		coords,
		{
			ctor: '::',
			_0: last,
			_1: {ctor: '[]'}
		});
	var middles = A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '[]'},
		_elm_lang$core$List$tail(lefts));
	var rights = A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '[]'},
		_elm_lang$core$List$tail(middles));
	return A4(_elm_lang$core$List$map3, _terezka$elm_plot$Internal_Draw$toBezierPoints, lefts, middles, rights);
};
var _terezka$elm_plot$Internal_Draw$toInstruction = F2(
	function (instructionType, coords) {
		var coordsString = A2(
			_elm_lang$core$String$join,
			',',
			A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, coords));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			instructionType,
			A2(_elm_lang$core$Basics_ops['++'], ' ', coordsString));
	});
var _terezka$elm_plot$Internal_Draw$coordsToInstruction = F2(
	function (instructionType, coords) {
		return A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p17) {
					var _p18 = _p17;
					return A2(
						_terezka$elm_plot$Internal_Draw$toInstruction,
						instructionType,
						{
							ctor: '::',
							_0: _p18._0,
							_1: {
								ctor: '::',
								_0: _p18._1,
								_1: {ctor: '[]'}
							}
						});
				},
				coords));
	});
var _terezka$elm_plot$Internal_Draw$coordsListToInstruction = F2(
	function (instructionType, coords) {
		return A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$map,
				function (points) {
					return A2(
						_terezka$elm_plot$Internal_Draw$toInstruction,
						instructionType,
						A3(
							_elm_lang$core$List$foldr,
							F2(
								function (_p19, all) {
									var _p20 = _p19;
									return A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: _p20._0,
											_1: {
												ctor: '::',
												_0: _p20._1,
												_1: {ctor: '[]'}
											}
										},
										all);
								}),
							{ctor: '[]'},
							points));
				},
				coords));
	});
var _terezka$elm_plot$Internal_Draw$toLineInstructions = function (smoothing) {
	var _p21 = smoothing;
	if (_p21.ctor === 'None') {
		return _terezka$elm_plot$Internal_Draw$coordsToInstruction('L');
	} else {
		return function (_p22) {
			return A2(
				_terezka$elm_plot$Internal_Draw$coordsListToInstruction,
				'S',
				_terezka$elm_plot$Internal_Draw$coordsToSmoothBezierCoords(_p22));
		};
	}
};
var _terezka$elm_plot$Internal_Draw$startPath = function (data) {
	var tail = A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '[]'},
		_elm_lang$core$List$tail(data));
	var _p23 = A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '_Tuple2', _0: 0, _1: 0},
		_elm_lang$core$List$head(data));
	var x = _p23._0;
	var y = _p23._1;
	return {
		ctor: '_Tuple2',
		_0: A2(
			_terezka$elm_plot$Internal_Draw$toInstruction,
			'M',
			{
				ctor: '::',
				_0: x,
				_1: {
					ctor: '::',
					_0: y,
					_1: {ctor: '[]'}
				}
			}),
		_1: tail
	};
};
var _terezka$elm_plot$Internal_Draw$classBase = function (base) {
	return A2(_elm_lang$core$Basics_ops['++'], 'elm-plot__', base);
};
var _terezka$elm_plot$Internal_Draw$classAttribute = F2(
	function (base, classes) {
		return _elm_lang$svg$Svg_Attributes$class(
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: _terezka$elm_plot$Internal_Draw$classBase(base),
					_1: classes
				}));
	});
var _terezka$elm_plot$Internal_Draw$classAttributeOriented = F3(
	function (base, orientation, classes) {
		return A2(
			_terezka$elm_plot$Internal_Draw$classAttribute,
			base,
			{
				ctor: '::',
				_0: A3(
					F2(
						function (x, y) {
							return A2(_terezka$elm_plot$Internal_Stuff_ops['?'], x, y);
						}),
					orientation,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_terezka$elm_plot$Internal_Draw$classBase(base),
						'--x'),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_terezka$elm_plot$Internal_Draw$classBase(base),
						'--y')),
				_1: classes
			});
	});
var _terezka$elm_plot$Internal_Draw$positionAttributes = F2(
	function (_p25, _p24) {
		var _p26 = _p25;
		var _p27 = _p24;
		return {
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$x1(
				_elm_lang$core$Basics$toString(_p26._0)),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$y1(
					_elm_lang$core$Basics$toString(_p26._1)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x2(
						_elm_lang$core$Basics$toString(_p27._0)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y2(
							_elm_lang$core$Basics$toString(_p27._1)),
						_1: {ctor: '[]'}
					}
				}
			}
		};
	});
var _terezka$elm_plot$Internal_Draw$fullLine = F3(
	function (attributes, _p28, value) {
		var _p29 = _p28;
		var _p31 = _p29.toSvgCoords;
		var _p30 = _p29.scale.x;
		var lowest = _p30.lowest;
		var highest = _p30.highest;
		var begin = _p31(
			{ctor: '_Tuple2', _0: lowest, _1: value});
		var end = _p31(
			{ctor: '_Tuple2', _0: highest, _1: value});
		return A2(
			_elm_lang$svg$Svg$line,
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_terezka$elm_plot$Internal_Draw$positionAttributes, begin, end),
				attributes),
			{ctor: '[]'});
	});
