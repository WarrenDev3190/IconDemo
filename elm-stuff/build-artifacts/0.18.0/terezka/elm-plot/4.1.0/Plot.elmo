var _terezka$elm_plot$Plot$getAxisCrossings = F2(
	function (axisConfigs, oppositeScale) {
		return A2(
			_elm_lang$core$List$map,
			function (_p0) {
				return A2(
					_terezka$elm_plot$Internal_Axis$getAxisPosition,
					oppositeScale,
					function (_) {
						return _.position;
					}(_p0));
			},
			axisConfigs);
	});
var _terezka$elm_plot$Plot$getYValue = F3(
	function (xValue, _p1, result) {
		var _p2 = _p1;
		return _elm_lang$core$Native_Utils.eq(_p2._0, xValue) ? _elm_lang$core$Maybe$Just(
			{
				ctor: '::',
				_0: _p2._1,
				_1: {ctor: '[]'}
			}) : result;
	});
var _terezka$elm_plot$Plot$collectYValue = F2(
	function (xValue, points) {
		return A3(
			_elm_lang$core$List$foldr,
			_terezka$elm_plot$Plot$getYValue(xValue),
			_elm_lang$core$Maybe$Nothing,
			points);
	});
var _terezka$elm_plot$Plot$collectYValues = F3(
	function (xValue, element, yValues) {
		var _p3 = element;
		switch (_p3.ctor) {
			case 'Area':
				return {
					ctor: '::',
					_0: A2(_terezka$elm_plot$Plot$collectYValue, xValue, _p3._1),
					_1: yValues
				};
			case 'Line':
				return {
					ctor: '::',
					_0: A2(_terezka$elm_plot$Plot$collectYValue, xValue, _p3._1),
					_1: yValues
				};
			case 'Scatter':
				return {
					ctor: '::',
					_0: A2(_terezka$elm_plot$Plot$collectYValue, xValue, _p3._1),
					_1: yValues
				};
			case 'Bars':
				return {
					ctor: '::',
					_0: A2(_terezka$elm_plot$Internal_Bars$getYValues, xValue, _p3._2),
					_1: yValues
				};
			default:
				return yValues;
		}
	});
var _terezka$elm_plot$Plot$getLastGetTickValues = function (axisConfigs) {
	return _terezka$elm_plot$Internal_Axis$getValues(
		function (_) {
			return _.tickValues;
		}(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_terezka$elm_plot$Internal_Axis$defaultConfigX,
				_elm_lang$core$List$head(axisConfigs))));
};
var _terezka$elm_plot$Plot$foldAxisConfigs = F2(
	function (element, axisConfigs) {
		var _p4 = element;
		if (_p4.ctor === 'Axis') {
			return A3(
				_terezka$elm_plot$Internal_Stuff$foldOriented,
				function (configs) {
					return {ctor: '::', _0: _p4._0, _1: configs};
				},
				_p4._0.orientation,
				axisConfigs);
		} else {
			return axisConfigs;
		}
	});
var _terezka$elm_plot$Plot$toAxisConfigsOriented = A2(
	_elm_lang$core$List$foldr,
	_terezka$elm_plot$Plot$foldAxisConfigs,
	{
		x: {ctor: '[]'},
		y: {ctor: '[]'}
	});
var _terezka$elm_plot$Plot$getHintInfo = F2(
	function (elements, xValue) {
		return A2(
			_terezka$elm_plot$Plot_Hint$HintInfo,
			xValue,
			A3(
				_elm_lang$core$List$foldr,
				_terezka$elm_plot$Plot$collectYValues(xValue),
				{ctor: '[]'},
				elements));
	});
var _terezka$elm_plot$Plot$flipMeta = function (_p5) {
	var _p6 = _p5;
	return _elm_lang$core$Native_Utils.update(
		_p6,
		{
			scale: _terezka$elm_plot$Internal_Stuff$flipOriented(_p6.scale),
			toSvgCoords: _p6.oppositeToSvgCoords,
			oppositeToSvgCoords: _p6.toSvgCoords,
			axisCrossings: _p6.oppositeAxisCrossings,
			oppositeAxisCrossings: _p6.axisCrossings,
			ticks: _p6.oppositeTicks,
			oppositeTicks: _p6.ticks
		});
};
var _terezka$elm_plot$Plot$getFlippedMeta = F2(
	function (orientation, meta) {
		var _p7 = orientation;
		if (_p7.ctor === 'X') {
			return meta;
		} else {
			return _terezka$elm_plot$Plot$flipMeta(meta);
		}
	});
var _terezka$elm_plot$Plot$updateInternalBounds = F2(
	function (old, $new) {
		return _elm_lang$core$Maybe$Just(
			A2(_terezka$elm_plot$Internal_Stuff$foldBounds, old, $new));
	});
var _terezka$elm_plot$Plot$foldInternalBoundsBars = F3(
	function (config, groups, bounds) {
		var allBarPoints = A2(_terezka$elm_plot$Internal_Bars$toPoints, config, groups);
		var _p8 = _elm_lang$core$List$unzip(allBarPoints);
		var allBarXValues = _p8._0;
		var newXBounds = A2(
			_terezka$elm_plot$Plot$updateInternalBounds,
			bounds.x,
			{
				lower: _terezka$elm_plot$Internal_Stuff$getLowest(allBarXValues) - 0.5,
				upper: _terezka$elm_plot$Internal_Stuff$getHighest(allBarXValues) + 0.5
			});
		return _elm_lang$core$Native_Utils.update(
			bounds,
			{x: newXBounds});
	});
var _terezka$elm_plot$Plot$foldInternalBoundsArea = function (bounds) {
	return _elm_lang$core$Native_Utils.update(
		bounds,
		{
			y: _elm_lang$core$Maybe$Just(
				A2(
					_terezka$elm_plot$Internal_Stuff$foldBounds,
					bounds.y,
					{lower: 0, upper: 0}))
		});
};
var _terezka$elm_plot$Plot$foldInternalBounds = function (element) {
	var _p9 = element;
	switch (_p9.ctor) {
		case 'Area':
			return _terezka$elm_plot$Plot$foldInternalBoundsArea;
		case 'Bars':
			return function (_p10) {
				return _terezka$elm_plot$Plot$foldInternalBoundsArea(
					A3(_terezka$elm_plot$Plot$foldInternalBoundsBars, _p9._0, _p9._2, _p10));
			};
		default:
			return _elm_lang$core$Basics$identity;
	}
};
var _terezka$elm_plot$Plot$foldPoints = F2(
	function (element, allPoints) {
		var _p11 = element;
		switch (_p11.ctor) {
			case 'Area':
				return A2(_elm_lang$core$Basics_ops['++'], allPoints, _p11._1);
			case 'Line':
				return A2(_elm_lang$core$Basics_ops['++'], allPoints, _p11._1);
			case 'Scatter':
				return A2(_elm_lang$core$Basics_ops['++'], allPoints, _p11._1);
			case 'Bars':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					allPoints,
					A2(_terezka$elm_plot$Internal_Bars$toPoints, _p11._0, _p11._2));
			default:
				return allPoints;
		}
	});
var _terezka$elm_plot$Plot$toValuesOriented = function (elements) {
	return function (_p12) {
		var _p13 = _p12;
		return A2(_terezka$elm_plot$Internal_Types$Oriented, _p13._0, _p13._1);
	}(
		_elm_lang$core$List$unzip(
			A3(
				_elm_lang$core$List$foldr,
				_terezka$elm_plot$Plot$foldPoints,
				{ctor: '[]'},
				elements)));
};
var _terezka$elm_plot$Plot$calculateMeta = F2(
	function (_p14, elements) {
		var _p15 = _p14;
		var _p17 = _p15.size;
		var _p16 = _p15.margin;
		var top = _p16._0;
		var right = _p16._1;
		var bottom = _p16._2;
		var left = _p16._3;
		var axisConfigs = _terezka$elm_plot$Plot$toAxisConfigsOriented(elements);
		var internalBounds = A3(
			_elm_lang$core$List$foldl,
			_terezka$elm_plot$Plot$foldInternalBounds,
			A2(_terezka$elm_plot$Internal_Types$Oriented, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing),
			elements);
		var values = _terezka$elm_plot$Plot$toValuesOriented(elements);
		var xScale = A6(
			_terezka$elm_plot$Internal_Scale$getScale,
			_p17.x,
			_p15.range,
			internalBounds.x,
			A2(_terezka$elm_plot$Internal_Types$Edges, left, right),
			{ctor: '_Tuple2', _0: 0, _1: 0},
			values.x);
		var xTicks = A2(_terezka$elm_plot$Plot$getLastGetTickValues, axisConfigs.x, xScale);
		var yScale = A6(
			_terezka$elm_plot$Internal_Scale$getScale,
			_p17.y,
			_p15.domain,
			internalBounds.y,
			A2(_terezka$elm_plot$Internal_Types$Edges, top, bottom),
			_p15.padding,
			values.y);
		var yTicks = A2(_terezka$elm_plot$Plot$getLastGetTickValues, axisConfigs.y, yScale);
		return {
			scale: A2(_terezka$elm_plot$Internal_Types$Oriented, xScale, yScale),
			toSvgCoords: A2(_terezka$elm_plot$Internal_Scale$toSvgCoordsX, xScale, yScale),
			oppositeToSvgCoords: A2(_terezka$elm_plot$Internal_Scale$toSvgCoordsY, xScale, yScale),
			fromSvgCoords: A2(_terezka$elm_plot$Internal_Scale$fromSvgCoords, xScale, yScale),
			ticks: xTicks,
			oppositeTicks: yTicks,
			axisCrossings: A2(_terezka$elm_plot$Plot$getAxisCrossings, axisConfigs.x, yScale),
			oppositeAxisCrossings: A2(_terezka$elm_plot$Plot$getAxisCrossings, axisConfigs.y, xScale),
			toNearestX: _terezka$elm_plot$Internal_Stuff$toNearest(values.x),
			getHintInfo: _terezka$elm_plot$Plot$getHintInfo(elements),
			id: _p15.id
		};
	});
var _terezka$elm_plot$Plot$viewElement = F3(
	function (meta, element, _p18) {
		var _p19 = _p18;
		var _p23 = _p19._0;
		var _p22 = _p19._1;
		var _p20 = element;
		switch (_p20.ctor) {
			case 'Line':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: A3(_terezka$elm_plot$Internal_Line$view, meta, _p20._0, _p20._1),
						_1: _p23
					},
					_1: _p22
				};
			case 'Area':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: A3(_terezka$elm_plot$Internal_Area$view, meta, _p20._0, _p20._1),
						_1: _p23
					},
					_1: _p22
				};
			case 'Scatter':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: A3(_terezka$elm_plot$Internal_Scatter$view, meta, _p20._0, _p20._1),
						_1: _p23
					},
					_1: _p22
				};
			case 'Bars':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: A4(_terezka$elm_plot$Internal_Bars$view, meta, _p20._0, _p20._1, _p20._2),
						_1: _p23
					},
					_1: _p22
				};
			case 'Axis':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: A2(
							_terezka$elm_plot$Internal_Axis$view,
							A2(_terezka$elm_plot$Plot$getFlippedMeta, _p20._0.orientation, meta),
							_p20._0),
						_1: _p23
					},
					_1: _p22
				};
			case 'Grid':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: A2(
							_terezka$elm_plot$Internal_Grid$view,
							A2(_terezka$elm_plot$Plot$getFlippedMeta, _p20._0.orientation, meta),
							_p20._0),
						_1: _p23
					},
					_1: _p22
				};
			case 'CustomElement':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: _p20._0(meta.toSvgCoords),
						_1: _p23
					},
					_1: _p22
				};
			default:
				var _p21 = _p20._1;
				if (_p21.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: _p23,
						_1: {
							ctor: '::',
							_0: A3(_terezka$elm_plot$Internal_Hint$view, meta, _p20._0, _p21._0),
							_1: _p22
						}
					};
				} else {
					return {ctor: '_Tuple2', _0: _p23, _1: _p22};
				}
		}
	});
var _terezka$elm_plot$Plot$viewElements = F2(
	function (meta, elements) {
		return A3(
			_elm_lang$core$List$foldr,
			_terezka$elm_plot$Plot$viewElement(meta),
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			elements);
	});
var _terezka$elm_plot$Plot$sizeStyle = function (_p24) {
	var _p25 = _p24;
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'height',
			_1: _terezka$elm_plot$Internal_Draw$toPixels(_p25.y)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'width',
				_1: _terezka$elm_plot$Internal_Draw$toPixels(_p25.x)
			},
			_1: {ctor: '[]'}
		}
	};
};
var _terezka$elm_plot$Plot$viewSvg = F2(
	function (_p26, views) {
		var _p27 = _p26;
		return A2(
			_elm_lang$svg$Svg$svg,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$height(
					_elm_lang$core$Basics$toString(_p27.y)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$width(
						_elm_lang$core$Basics$toString(_p27.x)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$class('elm-plot__inner'),
						_1: {ctor: '[]'}
					}
				}
			},
			views);
	});
var _terezka$elm_plot$Plot$plotAttributes = function (_p28) {
	var _p29 = _p28;
	return {
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('elm-plot'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_terezka$elm_plot$Plot$sizeStyle(_p29.size),
					_p29.style)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id(_p29.id),
				_1: {ctor: '[]'}
			}
		}
	};
};
var _terezka$elm_plot$Plot$viewPlot = F3(
	function (_p31, meta, _p30) {
		var _p32 = _p31;
		var _p33 = _p30;
		return A2(
			_elm_lang$html$Html$div,
			_terezka$elm_plot$Plot$plotAttributes(_p32),
			{
				ctor: '::',
				_0: A2(_terezka$elm_plot$Plot$viewSvg, _p32.size, _p33._0),
				_1: _p33._1
			});
	});
var _terezka$elm_plot$Plot$parsePlot = F2(
	function (config, elements) {
		var meta = A2(_terezka$elm_plot$Plot$calculateMeta, config, elements);
		return A3(
			_terezka$elm_plot$Plot$viewPlot,
			config,
			meta,
			A2(_terezka$elm_plot$Plot$viewElements, meta, elements));
	});
var _terezka$elm_plot$Plot$getPosition = A2(
	_elm_lang$core$Json_Decode$map,
	function (_p34) {
		var _p35 = _p34;
		return {ctor: '_Tuple2', _0: _p35.left, _1: _p35.top};
	},
	_debois$elm_dom$DOM$boundingClientRect);
var _terezka$elm_plot$Plot$getPlotPosition = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: _terezka$elm_plot$Plot$getPosition,
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$lazy(
				function (_p36) {
					return _terezka$elm_plot$Plot$getParentPosition;
				}),
			_1: {ctor: '[]'}
		}
	});
var _terezka$elm_plot$Plot$getParentPosition = _debois$elm_dom$DOM$parentElement(_terezka$elm_plot$Plot$getPlotPosition);
var _terezka$elm_plot$Plot$getRelativePosition = F3(
	function (_p39, _p38, _p37) {
		var _p40 = _p39;
		var _p41 = _p38;
		var _p42 = _p37;
		var _p43 = _p40.fromSvgCoords(
			{ctor: '_Tuple2', _0: _p41._0 - _p42._0, _1: _p41._1 - _p42._1});
		var x = _p43._0;
		var y = _p43._1;
		return {
			ctor: '_Tuple2',
			_0: _p40.toNearestX(x),
			_1: y
		};
	});
var _terezka$elm_plot$Plot$shouldPositionUpdate = F2(
	function (_p45, _p44) {
		var _p46 = _p45;
		var _p47 = _p44;
		var _p48 = _p46.position;
		if (_p48.ctor === 'Nothing') {
			return true;
		} else {
			return (!_elm_lang$core$Native_Utils.eq(_p48._0._1, _p47._1)) || (!_elm_lang$core$Native_Utils.eq(_p48._0._0, _p47._0));
		}
	});
var _terezka$elm_plot$Plot$getHoveredValue = function (_p49) {
	var _p50 = _p49;
	return _p50._0.position;
};
var _terezka$elm_plot$Plot$rangeHighest = F2(
	function (toHighest, _p51) {
		var _p52 = _p51;
		return _elm_lang$core$Native_Utils.update(
			_p52,
			{
				range: _elm_lang$core$Native_Utils.update(
					_p52.range,
					{upper: toHighest})
			});
	});
var _terezka$elm_plot$Plot$rangeLowest = F2(
	function (toLowest, _p53) {
		var _p54 = _p53;
		return _elm_lang$core$Native_Utils.update(
			_p54,
			{
				range: _elm_lang$core$Native_Utils.update(
					_p54.range,
					{lower: toLowest})
			});
	});
var _terezka$elm_plot$Plot$domainHighest = F2(
	function (toHighest, _p55) {
		var _p56 = _p55;
		return _elm_lang$core$Native_Utils.update(
			_p56,
			{
				domain: _elm_lang$core$Native_Utils.update(
					_p56.domain,
					{upper: toHighest})
			});
	});
var _terezka$elm_plot$Plot$domainLowest = F2(
	function (toLowest, _p57) {
		var _p58 = _p57;
		return _elm_lang$core$Native_Utils.update(
			_p58,
			{
				domain: _elm_lang$core$Native_Utils.update(
					_p58.domain,
					{lower: toLowest})
			});
	});
var _terezka$elm_plot$Plot$id = F2(
	function (id, config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{id: id});
	});
var _terezka$elm_plot$Plot$classes = F2(
	function (classes, config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{classes: classes});
	});
var _terezka$elm_plot$Plot$margin = F2(
	function (_p59, config) {
		var _p60 = _p59;
		return _elm_lang$core$Native_Utils.update(
			config,
			{
				margin: {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Basics$toFloat(_p60._0),
					_1: _elm_lang$core$Basics$toFloat(_p60._1),
					_2: _elm_lang$core$Basics$toFloat(_p60._2),
					_3: _elm_lang$core$Basics$toFloat(_p60._3)
				}
			});
	});
var _terezka$elm_plot$Plot$size = F2(
	function (_p61, config) {
		var _p62 = _p61;
		return _elm_lang$core$Native_Utils.update(
			config,
			{
				size: A2(
					_terezka$elm_plot$Internal_Types$Oriented,
					_elm_lang$core$Basics$toFloat(_p62._0),
					_elm_lang$core$Basics$toFloat(_p62._1))
			});
	});
var _terezka$elm_plot$Plot$padding = F2(
	function (_p63, config) {
		var _p64 = _p63;
		return _elm_lang$core$Native_Utils.update(
			config,
			{
				padding: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$toFloat(_p64._0),
					_1: _elm_lang$core$Basics$toFloat(_p64._1)
				}
			});
	});
var _terezka$elm_plot$Plot$defaultConfig = {
	size: A2(_terezka$elm_plot$Internal_Types$Oriented, 800, 500),
	padding: {ctor: '_Tuple2', _0: 0, _1: 0},
	margin: {ctor: '_Tuple4', _0: 0, _1: 0, _2: 0, _3: 0},
	classes: {ctor: '[]'},
	style: {ctor: '[]'},
	domain: A2(_terezka$elm_plot$Internal_Types$EdgesAny, _elm_lang$core$Basics$identity, _elm_lang$core$Basics$identity),
	range: A2(_terezka$elm_plot$Internal_Types$EdgesAny, _elm_lang$core$Basics$identity, _elm_lang$core$Basics$identity),
	id: 'elm-plot'
};
var _terezka$elm_plot$Plot$style = F2(
	function (style, config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{
				style: A2(
					_elm_lang$core$Basics_ops['++'],
					_terezka$elm_plot$Plot$defaultConfig.style,
					A2(
						_elm_lang$core$Basics_ops['++'],
						style,
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '0'},
							_1: {ctor: '[]'}
						}))
			});
	});
var _terezka$elm_plot$Plot$toPlotConfig = A2(
	_elm_lang$core$List$foldl,
	F2(
		function (x, y) {
			return x(y);
		}),
	_terezka$elm_plot$Plot$defaultConfig);
var _terezka$elm_plot$Plot$plot = function (attrs) {
	return A2(
		_elm_lang$svg$Svg_Lazy$lazy2,
		_terezka$elm_plot$Plot$parsePlot,
		_terezka$elm_plot$Plot$toPlotConfig(attrs));
};
var _terezka$elm_plot$Plot$Config = F8(
	function (a, b, c, d, e, f, g, h) {
		return {size: a, padding: b, margin: c, classes: d, style: e, domain: f, range: g, id: h};
	});
var _terezka$elm_plot$Plot$StateInner = function (a) {
	return {position: a};
};
var _terezka$elm_plot$Plot$CustomElement = function (a) {
	return {ctor: 'CustomElement', _0: a};
};
var _terezka$elm_plot$Plot$custom = function (view) {
	return _terezka$elm_plot$Plot$CustomElement(view);
};
var _terezka$elm_plot$Plot$Grid = function (a) {
	return {ctor: 'Grid', _0: a};
};
var _terezka$elm_plot$Plot$horizontalGrid = function (attrs) {
	return _terezka$elm_plot$Plot$Grid(
		A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return x(y);
				}),
			_terezka$elm_plot$Internal_Grid$defaultConfigX,
			attrs));
};
var _terezka$elm_plot$Plot$verticalGrid = function (attrs) {
	return _terezka$elm_plot$Plot$Grid(
		A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return x(y);
				}),
			_terezka$elm_plot$Internal_Grid$defaultConfigY,
			attrs));
};
var _terezka$elm_plot$Plot$Axis = function (a) {
	return {ctor: 'Axis', _0: a};
};
var _terezka$elm_plot$Plot$xAxis = function (attrs) {
	return _terezka$elm_plot$Plot$Axis(
		A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, y) {
					return x(y);
				}),
			_terezka$elm_plot$Internal_Axis$defaultConfigX,
			attrs));
};
var _terezka$elm_plot$Plot$yAxis = function (attrs) {
	return _terezka$elm_plot$Plot$Axis(
		A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, y) {
					return x(y);
				}),
			_terezka$elm_plot$Internal_Axis$defaultConfigY,
			attrs));
};
var _terezka$elm_plot$Plot$Hint = F2(
	function (a, b) {
		return {ctor: 'Hint', _0: a, _1: b};
	});
var _terezka$elm_plot$Plot$hint = F2(
	function (attrs, position) {
		return A2(
			_terezka$elm_plot$Plot$Hint,
			A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return x(y);
					}),
				_terezka$elm_plot$Internal_Hint$defaultConfig,
				attrs),
			position);
	});
var _terezka$elm_plot$Plot$Scatter = F2(
	function (a, b) {
		return {ctor: 'Scatter', _0: a, _1: b};
	});
var _terezka$elm_plot$Plot$scatter = function (attrs) {
	return _terezka$elm_plot$Plot$Scatter(
		A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return x(y);
				}),
			_terezka$elm_plot$Internal_Scatter$defaultConfig,
			attrs));
};
var _terezka$elm_plot$Plot$Bars = F3(
	function (a, b, c) {
		return {ctor: 'Bars', _0: a, _1: b, _2: c};
	});
var _terezka$elm_plot$Plot$bars = F3(
	function (attrs, styleAttrsList, groups) {
		return A3(
			_terezka$elm_plot$Plot$Bars,
			A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return x(y);
					}),
				_terezka$elm_plot$Internal_Bars$defaultConfig,
				attrs),
			A2(
				_elm_lang$core$List$map,
				A2(
					_elm_lang$core$List$foldr,
					F2(
						function (x, y) {
							return x(y);
						}),
					_terezka$elm_plot$Internal_Bars$defaultStyleConfig),
				styleAttrsList),
			groups);
	});
var _terezka$elm_plot$Plot$Area = F2(
	function (a, b) {
		return {ctor: 'Area', _0: a, _1: b};
	});
var _terezka$elm_plot$Plot$area = F2(
	function (attrs, points) {
		return A2(
			_terezka$elm_plot$Plot$Area,
			A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return x(y);
					}),
				_terezka$elm_plot$Internal_Area$defaultConfig,
				attrs),
			points);
	});
var _terezka$elm_plot$Plot$Line = F2(
	function (a, b) {
		return {ctor: 'Line', _0: a, _1: b};
	});
var _terezka$elm_plot$Plot$line = F2(
	function (attrs, points) {
		return A2(
			_terezka$elm_plot$Plot$Line,
			A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return x(y);
					}),
				_terezka$elm_plot$Internal_Line$defaultConfig,
				attrs),
			points);
	});
var _terezka$elm_plot$Plot$State = function (a) {
	return {ctor: 'State', _0: a};
};
var _terezka$elm_plot$Plot$initialState = _terezka$elm_plot$Plot$State(
	{position: _elm_lang$core$Maybe$Nothing});
var _terezka$elm_plot$Plot$update = F2(
	function (msg, _p65) {
		var _p66 = _p65;
		var _p69 = _p66._0;
		var _p67 = msg;
		if (_p67.ctor === 'Hovering') {
			var _p68 = _p67._0;
			return A2(_terezka$elm_plot$Plot$shouldPositionUpdate, _p69, _p68) ? _terezka$elm_plot$Plot$State(
				_elm_lang$core$Native_Utils.update(
					_p69,
					{
						position: _elm_lang$core$Maybe$Just(_p68)
					})) : _terezka$elm_plot$Plot$State(_p69);
		} else {
			return _terezka$elm_plot$Plot$State(
				{position: _elm_lang$core$Maybe$Nothing});
		}
	});
var _terezka$elm_plot$Plot$Custom = function (a) {
	return {ctor: 'Custom', _0: a};
};
var _terezka$elm_plot$Plot$Internal = function (a) {
	return {ctor: 'Internal', _0: a};
};
var _terezka$elm_plot$Plot$ResetPosition = {ctor: 'ResetPosition'};
var _terezka$elm_plot$Plot$Hovering = function (a) {
	return {ctor: 'Hovering', _0: a};
};
var _terezka$elm_plot$Plot$toMouseOverMsg = F4(
	function (meta, mouseX, mouseY, position) {
		var relativePosition = A3(
			_terezka$elm_plot$Plot$getRelativePosition,
			meta,
			{ctor: '_Tuple2', _0: mouseX, _1: mouseY},
			position);
		var _p70 = _elm_lang$core$Tuple$first(relativePosition);
		if (_p70.ctor === 'Just') {
			return _terezka$elm_plot$Plot$Internal(
				_terezka$elm_plot$Plot$Hovering(
					{
						ctor: '_Tuple2',
						_0: _p70._0,
						_1: _elm_lang$core$Tuple$second(relativePosition)
					}));
		} else {
			return _terezka$elm_plot$Plot$Internal(_terezka$elm_plot$Plot$ResetPosition);
		}
	});
var _terezka$elm_plot$Plot$handleMouseOver = function (meta) {
	return A4(
		_elm_lang$core$Json_Decode$map3,
		_terezka$elm_plot$Plot$toMouseOverMsg(meta),
		A2(_elm_lang$core$Json_Decode$field, 'clientX', _elm_lang$core$Json_Decode$float),
		A2(_elm_lang$core$Json_Decode$field, 'clientY', _elm_lang$core$Json_Decode$float),
		_debois$elm_dom$DOM$target(_terezka$elm_plot$Plot$getPlotPosition));
};
var _terezka$elm_plot$Plot$plotAttributesInteraction = function (meta) {
	return {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html_Events$on,
			'mousemove',
			_terezka$elm_plot$Plot$handleMouseOver(meta)),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onMouseLeave(
				_terezka$elm_plot$Plot$Internal(_terezka$elm_plot$Plot$ResetPosition)),
			_1: {ctor: '[]'}
		}
	};
};
var _terezka$elm_plot$Plot$viewPlotInteractive = F3(
	function (_p72, meta, _p71) {
		var _p73 = _p72;
		var _p74 = _p71;
		return A2(
			_elm_lang$html$Html$div,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_terezka$elm_plot$Plot$plotAttributes(_p73),
				_terezka$elm_plot$Plot$plotAttributesInteraction(meta)),
			{
				ctor: '::',
				_0: A2(_terezka$elm_plot$Plot$viewSvg, _p73.size, _p74._0),
				_1: _p74._1
			});
	});
var _terezka$elm_plot$Plot$parsePlotInteractive = F2(
	function (config, elements) {
		var meta = A2(_terezka$elm_plot$Plot$calculateMeta, config, elements);
		return A3(
			_terezka$elm_plot$Plot$viewPlotInteractive,
			config,
			meta,
			A2(_terezka$elm_plot$Plot$viewElements, meta, elements));
	});
var _terezka$elm_plot$Plot$plotInteractive = function (attrs) {
	return A2(
		_elm_lang$svg$Svg_Lazy$lazy2,
		_terezka$elm_plot$Plot$parsePlotInteractive,
		_terezka$elm_plot$Plot$toPlotConfig(attrs));
};
